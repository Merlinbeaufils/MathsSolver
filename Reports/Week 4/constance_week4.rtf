{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 This week, the Derivative Team put together the Tokenizer class and AbstractFunction class. There were many conflicts (such as same variable names, implementation issues\'85) so I spent Thursday morning resolving them. I then added Tokens to the AbstractFunction class. Beforehand, I had created an enum to represent operations, and now they are correctly represented as Tokens. I was also able to define the variables in the Function classes (such as base, exponent, and the arguments\'85) as Tokens. The AbstractFunction class is now ready for testing which I am currently starting to implement. \
\
}